import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import calendar
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import preprocessing   
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import mean_squared_error,mean_absolute_error,accuracy_score,r2_score
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from tensorflow import keras
import warnings
warnings.filterwarnings('ignore')


ss=preprocessing.StandardScaler()
x_train=ss.fit_transform(x_train)
x_test=ss.transform(x_test)


y_train = np.asarray(y_train)
y_test = np.asarray(y_test)

lrmodel = LinearRegression()
lrmodel.fit(x_train, y_train)

rfrmodel = RandomForestRegressor(n_estimators=10, random_state=1)
rfrmodel.fit(x_train,y_train)
rfrmodel_pred=rfrmodel.predict(x_test)

2

knn=KNeighborsClassifier(n_neighbors=8)
knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)

svc=SVC(C=1.0,kernel='rbf',gamma='auto')
svc.fit(x_train,y_train)
y_pred=svc.predict(x_test)

3

le = LabelEncoder()
df.Gender = le.fit_transform(df.Gender)
df.Geography = le.fit_transform(df.Geography)
df

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

model = keras.Sequential([
    keras.layers.Dense(13, input_shape=(10,),activation='relu'),
    keras.layers.Dense(15, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=100)


model.evaluate(x_test, y_test)

4


cur_x = 2                     # The algorithm starts at x=2
rate = 0.01                   # Learning rate
precision = 0.000001          # This tells us when to stop the algorithm
previous_step_size = 1 
max_iters = 10000             # maximum number of iterations
iters = 0                     # iteration counter
df = lambda x: 2*(x+3)        # Gradient of our function

while previous_step_size > precision and iters < max_iters:
    prev_x = cur_x                                # Store current x value in prev_x
    cur_x = cur_x - rate * df(prev_x)             # Grad descent
    previous_step_size = abs(cur_x - prev_x)      # Change in x
    iters = iters+1                               # iteration count
    print("Iteration",iters,"\nX value is",cur_x) # Print iterations

5

WCSS = [] # Within-Cluster Sum of Square

for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(X)
    WCSS.append(kmeans.inertia_)

plt.plot(range(1,11), WCSS)
plt.title("The elbow method")
plt.xlabel("Number of cluster")
plt.ylabel('WCSS') 
plt.show()  

#The point at which the elbow shape is created is 3, that is, our K value or an optimal number of clusters is 3.
kmeans = KMeans(n_clusters = 3, init = "k-means++", random_state = 42)
y_kmeans = kmeans.fit_predict(X)

y_kmeans


#Visualising the cluster
plt.scatter(X[y_kmeans == 0,0], X[y_kmeans == 0,1], s=60, c = 'red', label='Cluster1')
plt.scatter(X[y_kmeans == 1,0], X[y_kmeans == 1,1], s=60, c='blue', label='Cluster2')
plt.scatter(X[y_kmeans == 2,0], X[y_kmeans == 2,1], s=60, c='green', label='Cluster3')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c = 'black', label ='Centroids')

plt.xlabel('QUANTITYORDERED') 
plt.ylabel('ORDERLINENUMBER') 
plt.legend()
plt.show()

print("The local minimum occurs at", cur_x)





 * Time Complexity  : O(nlogn)   (n => number of unique characters in string)
 * Space Complexity : O(n)
 */

#include <bits/stdc++.h>
using namespace std;

class Node
{
private:
	char data;
	int freq;
	Node *lchild, *rchild;

public:
	Node(char d, int f = -1)
	{
		data = d;
		freq = f;
		lchild = rchild = NULL;
	}
	Node(Node *lc, Node *rc)
	{
		data = 0;
		freq = lc->freq + rc->freq;
		lchild = lc;
		rchild = rc;
	}
	void traverse(string code = "") const
	{
		if (lchild != NULL)
		{
			lchild->traverse(code + '0');
			rchild->traverse(code + '1');
		}
		else
		{
			cout << "\n\t" << setw(10) << data << setw(10) << freq << setw(15) << code << endl;
		}
	}
	bool operator<(const Node &a) const
	{
		return freq > a.freq;
	}
};

void huffman_encoding(string str)
{
	priority_queue<Node> pq;
	vector<int> frequency(256, 0);

	for (unsigned int i = 0; i < str.size(); i++)
	{
		frequency[str[i]]++;
	}
	for (int i = 0; i < 256; i++)
	{
		if (frequency[i] > 0)
		{
			pq.push(Node(i, frequency[i]));
		}
	}
	while (pq.size() > 1)
	{
		Node *lc = new Node(pq.top());
		pq.pop();
		Node *rc = new Node(pq.top());
		pq.pop();
		pq.push(Node(lc, rc));
	}
	cout << "\n\t The Huffman Code " << endl;
	cout << "\n\t" << setw(10) << "Data\t" << setw(10) << "Frequency" << setw(15) << "Huffman Code" << endl;
	pq.top().traverse();
}

int main()
{
	string str;

	cout << "\n\t Enter String to find Huffman Codes : ";
	cin >> str;

	huffman_encoding(str);
}



int knapsack(vector<int> val, vector<int> wt, int c)
{
	int n = wt.size();

	vector<vector<int>> dp(n+1, vector<int>(c+1, 0));
    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=c; j++)
        {
            dp[i][j] = dp[i-1][j];
            if(wt[i-1] <= j) dp[i][j] = max(dp[i][j], val[i-1]+dp[i-1][j-wt[i-1]]);
        }
    }
    return dp[n][c];
}



bool isSafe(vector<vector<int>board,int row,int col){
    int i,j;
    
    for(i=0;i<row;i++){
        if(board[row][i]){
            return false;
        }
    }
    for(i=row,j=col;i>=0 && j>=0;i--,j--){
        if(board[i][j]){
            return false;
        }
    }
    for(i=row,j=col;i<N && j>=0;i++,j--){
        if(board[i][j]){
            return false;
        }
    }
}

bool solveNQUtil(vector<vector<int>board,int col){
    if(col>=N){
        return true;
    }
    for(int i=0;i<N;i++){
        if(isSafe(board,i,col)){
            board[i][col]=1;
            if(solveNQUtil(board,col+1)){
                return true;
            }
            board[i][col]=0;
        }
    }
    return false;
}



/*
 * Problem Statement :- Write a program for analysis of quick sort by using deterministic
 * 						and randomized variant.
 */

#include<bits/stdc++.h>
using namespace std;

//Deterministic Quick-sort
// Pivot => last element in the array

int partition(vector<int> &a, int l, int h)
{
	int index = l;
	int pivot = h;
	for(int i=l; i<h; i++)
	{
		if(a[i] < a[pivot])
		{
			swap(a[i], a[index]);
			index++;
		}
	}
	swap(a[pivot], a[index]);
	return index;
}

int r_partition(vector<int> &a, int l, int h)
{
	int num = rand();
	int ri = l + num%(h-l+1);
	swap(a[h], a[ri]);
	return partition(a, l, h);
}

void quickSort(vector<int> &a, int low, int high)
{
	if(low >= high) return;

	int pi = partition(a, low, high);
	quickSort(a, low, pi-1);
	quickSort(a, pi+1, high);
}

void r_quickSort(vector<int> &a, int low, int high)
{
	if(low >= high) return;

	int pi = r_partition(a, low, high);
	r_quickSort(a, low, pi-1);
	r_quickSort(a, pi+1, high);
}

int main()
{
	int choice, n;
	while(true)
	{
		cout<<"\n\n Main-Menu \n\t 1. Deterministic Quick-Sort \n\t 2. Randomized Quick-Sort \n\t 3. Exit "<<endl;
		cout<<"\n\t Enter choice: ";
		cin>>choice;

		if(choice == 1)
		{
			cout<<"\n\t Enter the number of data element to be sorted: ";
			cin>>n;
			vector<int> a(n);

			cout<<"\n\t Enter the array: ";
			for(int i=0; i<n; i++) cin>>a[i];

			quickSort(a, 0, n-1);

			cout<<"\n\t Sorted Data: ";
			for (int i=0; i<n; i++) cout<<a[i]<<" ";
		}
		else if(choice == 2)
		{
			cout<<"\n\t Enter the number of data element to be sorted: ";
			cin>>n;
			vector<int> a(n);

			cout<<"\n\t Enter the array: ";
			for(int i=0; i<n; i++) cin>>a[i];

			quickSort(a, 0, n-1);

			cout<<"\n\t Sorted Data: ";
			for (int i=0; i<n; i++) cout<<a[i]<<" ";
		}
		else if(choice == 3)
		{
			cout<<"\n\t Thank you!!!";
			exit(0);
		}
		else
		{
			cout<<"\n\t Enter valid choice"<<endl;
		}
	}
}



// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract Bank {
    mapping(address => uint256) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Not enough ether");
        balances[msg.sender] -= _amount;
        (bool sent, ) = msg.sender.call{value: _amount}("Sent");
        require(sent, "failed to send ETH");
    }

    function getBal() public view returns (uint256) {
        return address(this).balance;
    }
}


// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

import "hardhat/console.sol";

contract MarksManagmtSys {
    // Structure
    struct Student {
        int256 ID;
        string fName;
        string lName;
        int256 marks;
    }

    address owner;
    int256 public stdCount = 0;
    //array
    mapping(int256 => Student) public stdRecords;

    modifier onlyOwner() {
        require(owner == msg.sender);
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // Create a function to add
    // the new records
    function addNewRecords(
        int256 _ID,
        string memory _fName,
        string memory _lName,
        int256 _marks
    ) public onlyOwner {
        // Increase the count by 1
        stdCount = stdCount + 1;

        // Fetch the student details
        // with the help of stdCount
        stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);
    }

    // fallback function
    fallback() external {
        console.log("Fallback function called");
    }
}




